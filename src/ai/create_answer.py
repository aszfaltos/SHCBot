from typing import List
from get_query import get_query
from vector_db import query

def _format_chat_history(chat_history: List[dict]) -> str:
    """
    Format a chat history into a string.

    Args:
    chat_history (List[dict]): A list of dictionaries containing the chat history.
        Each dictionary should contain the following keys:
            role (str): The role of the user who sent the message.
            content (str): The content of the message.

    Returns:
    str: A string representation of the chat history.
    """
    full_history = ""
    for item in chat_history:
        full_history.append(f"{item['role']}: {item['content']}")

    return full_history

def generate_answer(message: str,chat_history: List[dict]) -> str:
    """
    Generate an answer to a given message, given a chat history.

    This function takes a message and a chat history and generates an answer.
    The answer is generated by:
    1. formatting the chat history into a string.
    2. appending the message to the formatted chat history.
    3. generating a query from the formatted chat history.
    4. querying the vector database with the query.
    5. generating an answer from the context and history.

    Args:
        message (str): The user's message.
        chat_history (List[dict]): A list of messages in the chat history.
            Each message is a dictionary with 'role' and 'content' keys.

    Returns:
        str: The generated answer.
    """
    formatted_chat_history = _format_chat_history(chat_history)
    formatted_chat_history += f"User: {message}"
    vectordb_query = get_query(formatted_chat_history)
    context = query(vectordb_query)

    # TODO: Generate answer from context and history

    return f"Generating answer with this context: {context}"